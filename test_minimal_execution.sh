#!/bin/bash

# Teste m√≠nimo para verificar execu√ß√£o de c√≥digo Python
echo "üß™ Teste M√≠nimo - Execu√ß√£o de C√≥digo"
echo "===================================="

BASE_URL="http://localhost:8050"
PROJECT_UUID="test-debug-$(date +%s)"

echo "üîç Verificando se aplica√ß√£o est√° respondendo..."
if ! curl -s -f "$BASE_URL/health" &>/dev/null; then
    echo "‚ùå Aplica√ß√£o n√£o est√° respondendo em $BASE_URL"
    echo "   Execute: ./run_image_tests.sh --debug-crash"
    exit 1
fi

echo "‚úÖ Aplica√ß√£o est√° respondendo"

echo ""
echo "üêç Testando c√≥digo Python extremamente simples..."

# C√≥digo Python mais simples poss√≠vel
SIMPLE_CODE='def Run(engine):
    print("Hello from Python")
    engine.result.set({"status": "ok", "message": "success"}, content_type="json")'

echo "üìù C√≥digo de teste:"
echo "$SIMPLE_CODE"

echo ""
echo "üì§ Criando c√≥digo via API..."

# Criar c√≥digo
RESPONSE=$(curl -s -X POST "$BASE_URL/code" \
  -H "Content-Type: text/plain" \
  -d "$SIMPLE_CODE" \
  --get \
  --data-urlencode "project_uuid=$PROJECT_UUID" \
  --data-urlencode "name=Debug Test" \
  --data-urlencode "type=endpoint" \
  --data-urlencode "language=python")

echo "üìã Resposta da cria√ß√£o:"
echo "$RESPONSE"

# Extrair ID do c√≥digo
CODE_ID=$(echo "$RESPONSE" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(data.get('id', ''))
except:
    pass
" 2>/dev/null)

if [ -z "$CODE_ID" ]; then
    echo "‚ùå Falha ao criar c√≥digo ou extrair ID"
    echo "   Resposta completa: $RESPONSE"
    exit 1
fi

echo "‚úÖ C√≥digo criado com ID: $CODE_ID"

echo ""
echo "üöÄ Executando c√≥digo..."

# Executar c√≥digo
EXEC_RESPONSE=$(curl -s -X POST "$BASE_URL/action/endpoint/$CODE_ID" \
  -H "Content-Type: application/json" \
  -w "\nHTTP_STATUS_CODE:%{http_code}")

HTTP_STATUS=$(echo "$EXEC_RESPONSE" | tail -1 | cut -d: -f2)
EXEC_BODY=$(echo "$EXEC_RESPONSE" | head -n -1)

echo "üìã Status HTTP: $HTTP_STATUS"
echo "üìã Resposta da execu√ß√£o:"
echo "$EXEC_BODY"

if [ "$HTTP_STATUS" = "200" ]; then
    echo "‚úÖ Execu√ß√£o bem-sucedida!"
    
    # Verificar se a resposta cont√©m o resultado esperado
    if echo "$EXEC_BODY" | grep -q "success"; then
        echo "‚úÖ Resultado cont√©m dados esperados"
    else
        echo "‚ö†Ô∏è  Resultado n√£o cont√©m dados esperados"
    fi
else
    echo "‚ùå Execu√ß√£o falhou com status $HTTP_STATUS"
    echo ""
    echo "üîç Para investigar:"
    echo "   docker logs codeactions-app-test --tail 50"
    echo "   ./debug_application_crash.sh"
fi

echo ""
echo "üìä Resumo do teste:"
echo "=================="
echo "   Aplica√ß√£o respondendo: ‚úÖ"
echo "   Cria√ß√£o de c√≥digo: $([ -n "$CODE_ID" ] && echo "‚úÖ" || echo "‚ùå")"
echo "   Execu√ß√£o de c√≥digo: $([ "$HTTP_STATUS" = "200" ] && echo "‚úÖ" || echo "‚ùå")"

if [ "$HTTP_STATUS" != "200" ]; then
    echo ""
    echo "üí° Pr√≥ximos passos:"
    echo "   1. Verificar logs: docker logs codeactions-app-test"
    echo "   2. Debug completo: ./debug_application_crash.sh"
    echo "   3. Entrar no container: docker exec -it codeactions-app-test sh"
fi 