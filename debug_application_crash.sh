#!/bin/bash

# Script de debug para investigar crashes da aplica√ß√£o
echo "üîç Debug - Crash da Aplica√ß√£o"
echo "============================="

NETWORK_NAME="codeactions-test-network"
APP_CONTAINER_NAME="codeactions-app-test"

echo "üìã Verificando status atual dos containers:"
echo "==========================================="
docker ps -a --filter name=mongo-test
docker ps -a --filter name=redis-test
docker ps -a --filter name=$APP_CONTAINER_NAME

echo ""
echo "üìú Logs completos da aplica√ß√£o (√∫ltimas 100 linhas):"
echo "=================================================="
if docker ps -a --filter name=$APP_CONTAINER_NAME | grep -q $APP_CONTAINER_NAME; then
    docker logs $APP_CONTAINER_NAME --tail 100
else
    echo "‚ùå Container da aplica√ß√£o n√£o encontrado"
    exit 1
fi

echo ""
echo "üîç Investigando linha 167 de service.go:"
echo "========================================"
echo "A linha 167 est√° no m√©todo runPython, especificamente em:"
echo "  ‚Üí cmd.Wait() - esperando processo Python terminar"
echo "  ‚Üí Isso indica que o Python est√° falhando ou crashando"

echo ""
echo "üêç Verificando ambiente Python no container:"
echo "==========================================="
if docker ps --filter name=$APP_CONTAINER_NAME | grep -q $APP_CONTAINER_NAME; then
    echo "üìã Vers√£o do Python:"
    docker exec $APP_CONTAINER_NAME python --version || echo "‚ùå Python n√£o encontrado"
    
    echo ""
    echo "üìã Verificando engines/py/main.py:"
    docker exec $APP_CONTAINER_NAME ls -la /app/engines/py/ || echo "‚ùå Diret√≥rio engines/py n√£o encontrado"
    
    echo ""
    echo "üìã Testando Python b√°sico:"
    docker exec $APP_CONTAINER_NAME python -c "print('Python OK')" || echo "‚ùå Python n√£o funciona"
    
    echo ""
    echo "üìã Verificando bibliotecas Python necess√°rias:"
    docker exec $APP_CONTAINER_NAME python -c "import json, sys, argparse, pymongo; print('Bibliotecas b√°sicas OK')" || echo "‚ùå Bibliotecas b√°sicas falharam"
    
    echo ""
    echo "üìã Espa√ßo em disco no container:"
    docker exec $APP_CONTAINER_NAME df -h
    
    echo ""
    echo "üìã Verificando permiss√µes do diret√≥rio de trabalho:"
    docker exec $APP_CONTAINER_NAME ls -la /app/
    docker exec $APP_CONTAINER_NAME whoami
    
    echo ""
    echo "üìã Vari√°veis de ambiente do container:"
    docker exec $APP_CONTAINER_NAME env | grep -E "(PATH|PYTHON|FLOWS_CODE_ACTIONS)"
else
    echo "‚ùå Container n√£o est√° rodando, n√£o √© poss√≠vel investigar"
fi

echo ""
echo "üß™ Testando execu√ß√£o Python manual:"
echo "=================================="
if docker ps --filter name=$APP_CONTAINER_NAME | grep -q $APP_CONTAINER_NAME; then
    echo "Criando teste Python simples..."
    
    # Criar um teste Python simples
    docker exec $APP_CONTAINER_NAME sh -c 'echo "def Run(engine): print(\"Hello from Python\")" > /tmp/test_action.py'
    
    # Tentar executar com o mesmo m√©todo da aplica√ß√£o
    echo "Testando execu√ß√£o Python:"
    docker exec $APP_CONTAINER_NAME python -c "
import sys
sys.path.append('/app/engines/py')
try:
    import main
    print('main.py importado com sucesso')
except Exception as e:
    print(f'Erro ao importar main.py: {e}')
"
fi

echo ""
echo "üîç Verificando cgroups (Resource Management):"
echo "============================================"
if docker ps --filter name=$APP_CONTAINER_NAME | grep -q $APP_CONTAINER_NAME; then
    echo "üìã Sistema de cgroups:"
    docker exec $APP_CONTAINER_NAME ls -la /sys/fs/cgroup/ || echo "‚ùå cgroups n√£o dispon√≠vel"
    
    echo ""
    echo "üìã Verificando se cgroupfs est√° montado:"
    docker exec $APP_CONTAINER_NAME cat /proc/mounts | grep cgroup || echo "‚ùå cgroup n√£o montado"
fi

echo ""
echo "üîÑ Executando aplica√ß√£o com logs verbosos:"
echo "=========================================="
echo "Para debug mais detalhado, voc√™ pode:"
echo ""
echo "1. Rodar aplica√ß√£o com logs de debug:"
echo "   docker exec -it $APP_CONTAINER_NAME sh"
echo "   # Dentro do container:"
echo "   export FLOWS_CODE_ACTIONS_LOG_LEVEL=debug"
echo "   /app/codeactions"
echo ""
echo "2. Monitorar logs em tempo real:"
echo "   docker logs $APP_CONTAINER_NAME -f"
echo ""
echo "3. Testar c√≥digo Python diretamente:"
echo "   docker exec -it $APP_CONTAINER_NAME python /app/engines/py/main.py --help"

echo ""
echo "üìä Recursos do sistema:"
echo "====================="
echo "üìã Mem√≥ria e CPU do container:"
docker stats $APP_CONTAINER_NAME --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}" 2>/dev/null || echo "‚ùå Stats n√£o dispon√≠vel"

echo ""
echo "üìã Logs do sistema (dmesg) para verificar OOM kills:"
docker exec $APP_CONTAINER_NAME dmesg | tail -20 2>/dev/null || echo "‚ùå dmesg n√£o dispon√≠vel (normal em containers)"

echo ""
echo "üí° Pr√≥ximos passos recomendados:"
echo "==============================="
echo "1. Se Python n√£o est√° funcionando:"
echo "   ‚Üí Verificar se imagem Docker tem Python instalado"
echo "   ‚Üí Verificar se engines/py/main.py existe"
echo ""
echo "2. Se h√° problemas de recursos:"
echo "   ‚Üí Desabilitar Resource Management temporariamente"
echo "   ‚Üí Aumentar limites de CPU/mem√≥ria"
echo ""
echo "3. Se h√° problemas de permiss√µes:"
echo "   ‚Üí Verificar usu√°rio que roda a aplica√ß√£o"
echo "   ‚Üí Verificar permiss√µes dos arquivos"
echo ""
echo "4. Para debug detalhado:"
echo "   ‚Üí Adicionar mais logs no c√≥digo Go"
echo "   ‚Üí Executar aplica√ß√£o em modo debug"
echo "   ‚Üí Testar c√≥digo Python isoladamente" 